from aiogram import Router, types as tp, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.states import ContentData
from utils.config import list_admin
from TelegramMainLogic.GetData import kb_get_data as kb

router = Router()

@router.message(Command(commands=['share_content']))
async def introduction(message: tp.Message, state: FSMContext) -> None:

    '''
    –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    '''

    text_media = '''
–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–æ—Å—Ç üñåÔ∏è
–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ  –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è üì∏
'''

    await message.answer(
        text=text_media
    )

    await state.set_state(ContentData.file)


@router.message(ContentData.file)
async def get_media(message: tp. Message, state: FSMContext) -> None:

    '''
    –î–∞–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    '''

    if message.photo:
        file_id = message.photo[-1].file_id
        category = 'photo'
    
    elif message.video:
        file_id = message.video.file_id
        category = 'video'

    else:
        await message.answer(
            text='–í —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—åüòï\n\
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ üèû',
        )
        return

    await state.update_data(file=file_id, category=category)

    await message.answer(
        text='–•–æ—á–µ—à—å –∫–∞–∫-—Ç–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç? üßê',
        reply_markup=kb.reply.yes_no_caption_kb
        )
    
    await state.set_state(ContentData.status_caption)


@router.message(ContentData.status_caption)
async def get_status_caption(message: tp. Message, state: FSMContext) -> None:

    '''
    –î–∞–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    '''

    if message.text not in ['–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå']:
        await message.answer(
            text='–ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç "<b>–î–∞</b> ‚úÖ" –∏–ª–∏ "<b>–ù–µ—Ç</b> ‚ùå" üòâ',
            reply_markup=kb.reply.yes_no_caption_kb
        )
        return

    if message.text == '–ù–µ—Ç ‚ùå':
        await message.answer(
            text='–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–ª–æ–∂–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ? üßê',
            reply_markup=kb.reply.anonymously_kb
        )
        
        await state.set_state(ContentData.author)

        return

    await message.answer(
        text='–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ üí¨ (–Ω–µ –±–æ–ª–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤)',
        reply_markup=kb.reply.remove
    )
    
    await state.set_state(ContentData.caption)


@router.message(ContentData.caption)
async def get_caption(message: tp. Message, state: FSMContext) -> None:

    '''
    –î–∞–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    '''

    if message.text == None:
        await message.answer(
            text='–í —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ üòï'
        )
        return
    
    await state.update_data(caption=message.text)

    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–ª–æ–∂–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ? üßê',
        reply_markup=kb.reply.anonymously_kb
    )

    await state.set_state(ContentData.author)


@router.message(ContentData.author)
async def get_author_and_mailing(message: tp. Message, state: FSMContext, bot: Bot) -> None:

    '''
    –î–∞–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    '''

    if message.text not in ['–ê–Ω–æ–Ω–∏–º–Ω–æ üòà', '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ üåü']:
        await message.answer(
            text='–ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç "<b>–ê–Ω–æ–Ω–∏–º–Ω–æ üòà</b>" –∏–ª–∏ "<b>–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ üåü</b>" üòâ',
            reply_markup=kb.reply.anonymously_kb
        )
        return
    
    if message.text == '–ê–Ω–æ–Ω–∏–º–Ω–æ üòà':
        await state.update_data(
            first_name='–∞–Ω–æ–Ω–∏–º'
        )

    else:
        await state.update_data(
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )

    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –ø–æ—Å—Ç —Å–∫–æ—Ä–æ –æ–∫–∞–∂–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ üòå\n\
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /share_content ‚ÑπÔ∏è',
        reply_markup=kb.reply.remove
    )

        # –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω–∞–º.
    data: dict = await state.get_data()

    file_id = data.get('file')
    category = data.get('category')

    if data.get('first_name') == '–∞–Ω–æ–Ω–∏–º':
        name = '–ê–Ω–æ–Ω–∏–º'
    else:
        name = f"{data.get('first_name')} {data.get('last_name')} (@{data.get('username')})"

    for user_id in list_admin:

        text_topic = f'''
<blockquote>{data.get('caption', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}</blockquote>

<b>–ê–≤—Ç–æ—Ä:</b> <i>{name}</i>
'''

        await bot.send_message(
            chat_id=user_id,
            text='<b>–í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è</b>\n–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!'
        )
        
        if category == 'photo':
            await bot.send_photo(
                chat_id=user_id,
                photo=file_id,
                caption=text_topic
            )

        else:
            await bot.send_video(
                chat_id=user_id,
                video=file_id,
                caption=text_topic
            )

    await state.clear()
    